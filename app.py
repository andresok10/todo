from flask import Flask, current_app
from datetime import datetime
from calendario import app1
from descargas import app2
import os, urllib.request,zipfile ,tarfile, ssl, certifi, shutil

app = Flask(__name__)
app.secret_key = "supersecretkey"

@app.context_processor
def inject_globals():
    return {"hoy": datetime.today()}

app.register_blueprint(app1)
app.register_blueprint(app2)

#carpeta = os.path.join(os.path.dirname(os.path.abspath(__file__)), "static", "descargas")
    
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5002))
    app.run(host="0.0.0.0", port=port, debug=True)


'''
quiero que mi app borre los archivos de descarga en render despues de haberlos descargado en mi celular android
Perfecto, si est√°s usando Render.com para desplegar tu backend y quieres que los archivos se eliminen autom√°ticamente del servidor despu√©s de descargarlos en tu celular Android, puedes hacerlo f√°cilmente.

‚úÖ Objetivo:

Eliminar el archivo en el servidor inmediatamente despu√©s de que tu dispositivo haya completado la descarga.

üß† ¬øC√≥mo hacerlo?

La clave est√° en modificar tu endpoint que sirve el archivo (/descargax/<path:file>) para que:

Sirva el archivo como descarga (send_from_directory).

Y despu√©s de enviarlo, lo elimine del sistema de archivos (os.remove()).

Esto lo puedes lograr usando un after_this_request() de Flask.

‚úÖ Paso a paso: Actualiza tu endpoint /descargax/<file> as√≠:
from flask import send_from_directory, after_this_request

@app2.route("/descargax/<path:file>")
def serve_download(file):
    ruta_archivo = os.path.join(BASE_DIR, "descarga", file)

    if not os.path.exists(ruta_archivo):
        return "Archivo no encontrado", 404

    @after_this_request
    def eliminar_archivo(response):
        try:
            os.remove(ruta_archivo)
            print(f"üóëÔ∏è Archivo eliminado: {file}")
        except Exception as e:
            print(f"‚ùå Error al eliminar {file}: {e}")
        return response

    return send_from_directory(os.path.join(BASE_DIR, "descarga"), file, as_attachment=True)

‚úÖ ¬øQu√© hace este c√≥digo?

after_this_request registra una funci√≥n que se ejecuta despu√©s de que la respuesta fue enviada al cliente.

As√≠ garantizas que el archivo se descarg√≥ correctamente antes de borrarlo.

Usa os.remove(ruta_archivo) para borrar el archivo.

Imprime en consola si se elimin√≥ o si hubo error.

‚ö†Ô∏è Consideraciones

Esto solo funciona si el archivo se descarga correctamente.

Si la descarga se interrumpe (por mala conexi√≥n o cierre), el archivo no se borra ‚Äî lo cual es bueno.

Puedes limpiar archivos viejos autom√°ticamente con un cron job o script aparte si deseas (p. ej., eliminar archivos con m√°s de X minutos).
##############################
¬øQuieres que tambi√©n lo borre autom√°ticamente si no se descarga despu√©s de cierto tiempo (limpieza programada)? Te puedo ayudar con eso tambi√©n.
Perfecto. Si quieres que los archivos tambi√©n se eliminen autom√°ticamente si no se descargan en cierto tiempo, por ejemplo despu√©s de 5 minutos, entonces puedes implementar una limpieza programada (tipo cron job) directamente dentro de tu aplicaci√≥n Flask usando un hilo en segundo plano (thread).

‚úÖ Objetivo:

Eliminar archivos de la carpeta descarga/ si tienen m√°s de X minutos de antig√ºedad (ej: 5 minutos).

üß† Estrategia:

Crear un hilo de limpieza que se ejecute en segundo plano mientras el servidor est√° activo.

Este hilo buscar√° archivos dentro de /descarga y eliminar√° los que tengan m√°s de X minutos desde su creaci√≥n.

‚úÖ Paso 1: Agrega esto al final de tu archivo principal (ej. main.py o app.py):
import threading
import time

def limpiar_descargas_antiguas():
    carpeta = os.path.join(BASE_DIR, "descarga")
    tiempo_limite = 5 * 60  # 5 minutos en segundos

    while True:
        if os.path.exists(carpeta):
            ahora = time.time()
            for archivo in os.listdir(carpeta):
                ruta_archivo = os.path.join(carpeta, archivo)
                if os.path.isfile(ruta_archivo):
                    tiempo_modificado = os.path.getmtime(ruta_archivo)
                    if ahora - tiempo_modificado > tiempo_limite:
                        try:
                            os.remove(ruta_archivo)
                            print(f"üßπ Archivo antiguo eliminado: {archivo}")
                        except Exception as e:
                            print(f"‚ùå Error al eliminar archivo {archivo}: {e}")
        time.sleep(60)  # Ejecutar cada 60 segundos

‚úÖ Paso 2: Inicia el hilo cuando se arranca la app:

Justo al final del archivo, antes de app.run() o cuando se crea app2, a√±ade:

threading.Thread(target=limpiar_descargas_antiguas, daemon=True).start()

üîÅ Resultado:

Cada 60 segundos, tu app revisar√° los archivos en /descarga.

Si alguno tiene m√°s de 5 minutos desde su creaci√≥n/modificaci√≥n, se eliminar√° autom√°ticamente.

Esto funciona en paralelo con tus rutas Flask sin bloquear nada.

‚ö†Ô∏è Recomendaciones en Render.com:

Render reinicia tu instancia si est√° en modo free y sin uso, as√≠ que si quieres que este hilo siempre funcione, aseg√∫rate de estar en un plan que permita procesos duraderos (o que se active constantemente).

Esta soluci√≥n no usa cron jobs del sistema (no est√°n disponibles en Render), sino hilos dentro de Flask, que es 100% compatible.
'''